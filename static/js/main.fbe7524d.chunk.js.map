{"version":3,"sources":["layouts/PageWrapper/PageWrapper.tsx","enums/EmojiCategory.enum.ts","components/EmojiPicker/EmojiPicker.tsx","components/EmojiPicker/index.ts","components/EmojiChar/EmojiChar.tsx","components/EmojiChar/index.ts","components/AvatarCreation/AvatarCreation.tsx","components/AvatarCreation/index.ts","components/FittingRoom/FittingRoom.tsx","components/AvatarMaker/AvatarMaker.tsx","components/AvatarMaker/index.ts","components/Portal/Portal.tsx","components/Portal/index.ts","components/Modal/Modal.tsx","components/Modal/index.ts","components/PictureFrame/PictureFrame.tsx","App.tsx","components/PictureFrame/index.ts","data/emojis.ts","serviceWorker.ts","index.tsx"],"names":["PageWrapper","children","className","defaultProps","EmojiCategory","EmojiPicker","emojis","emojiCategory","onEmojiSelection","avatarSelections","style","margin","map","emoji","includes","emojiChar","htmlFor","name","checked","value","type","id","onChange","event","target","category","faces","EmojiChar","ariaLabel","classNames","role","aria-label","AvatarCreation","avatar","hat","face","top","bottom","shoe","FittingRoom","initialAvatar","toString","this","filter","item","join","AvatarMaker","onFinish","categories","useState","creation","setCreation","setCategory","onSubmit","preventDefault","categoryName","Object","values","onClick","prevCategory","shoes","bottoms","tops","hats","root","document","getElementById","section","createElement","Portal","useEffect","appendChild","createPortal","Modal","isOpen","PictureFrame","onFrameClose","ref","useRef","isCopied","setIsCopied","e","current","hidden","select","execCommand","readOnly","ActionType","initialAppState","isLoading","isError","isModalOpen","avatars","reducer","state","action","OPEN_MODAL","selectedAvatar","data","CLOSE_MODAL","App","useReducer","dispatch","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2YAOMA,G,YAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAClB,yBAAKC,UAAU,qBAAqBD,KAGhCE,EAAsB,CAC1BF,SAAU,sCAGZD,EAAYG,aAAeA,EAEZH,ICjBHI,EDiBGJ,I,wBCjBHI,K,cAAAA,E,YAAAA,E,YAAAA,E,kBAAAA,E,eAAAA,M,eCYNC,EAAc,SAAC,GAAD,IAClBC,EADkB,EAClBA,OACAC,EAFkB,EAElBA,cACAC,EAHkB,EAGlBA,iBACAC,EAJkB,EAIlBA,iBAJkB,OAMlB,8BAAUP,UAAU,kBAClB,4BAAQQ,MAAO,CAAEC,OAAQ,SAAzB,mBAAoDJ,EAApD,KACCD,EAAOM,KAAI,SAACC,GAAD,OACV,0BACEX,UAAS,+BACPO,EAAiBK,SAASD,EAAME,WAC5B,iCACA,uCAGN,2BAAOC,QAASH,EAAMI,MAAOJ,EAAME,WACnC,2BACEE,KAAMb,EAAcG,GACpBW,QAAST,EAAiBK,SAASD,EAAME,WACzCI,MAAON,EAAME,UACbK,KAAK,QACLlB,UAAU,gBACVmB,GAAIR,EAAMI,KACVK,SAAU,SAACC,GAAD,OACRf,EAAiBe,EAAMC,OAAOL,MAAON,EAAMY,mBAQjDtB,EAAsB,CAC1BG,OAAQ,GACRC,cAAeH,EAAcsB,MAC7BlB,iBAAkB,aAClBC,iBAAkB,CAAC,KAGrBJ,EAAYF,aAAeA,EAEZE,ICpDAA,EDoDAA,EE9CTsB,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAWf,EAAd,EAAcA,MAAOgB,EAArB,EAAqBA,WAArB,OAChB,0BAAM3B,UAAW2B,EAAYC,KAAK,MAAMC,aAAYH,GACjDf,KASLc,EAAUxB,aALkB,CAC1ByB,UAAW,GACXf,MAAO,IAKMc,ICnBAA,EDmBAA,EEXTK,G,MAAiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQJ,EAAX,EAAWA,WAAX,OACrB,wBAAI3B,UAAS,iBAAY2B,GAA0B,KAChDI,EAAOC,KACN,4BACE,kBAAC,EAAD,CAAWN,UAAU,MAAMf,MAAOoB,EAAOC,OAG5CD,EAAOE,MACN,4BACE,kBAAC,EAAD,CAAWP,UAAU,OAAOf,MAAOoB,EAAOE,QAG7CF,EAAOG,KACN,4BACE,kBAAC,EAAD,CAAWR,UAAU,MAAMf,MAAOoB,EAAOG,OAG5CH,EAAOI,QACN,4BACE,kBAAC,EAAD,CAAWT,UAAU,SAASf,MAAOoB,EAAOI,UAG/CJ,EAAOK,MACN,4BACE,kBAAC,EAAD,CAAWV,UAAU,OAAOf,MAAOoB,EAAOK,WAUlDN,EAAe7B,aAJa,CAC1B8B,OAAQ,IAKKD,IC5CAA,ED4CAA,EEtBAO,G,MAfK,SAAC,GAAuB,IAArBN,EAAoB,EAApBA,OACrB,OACE,yBAAK/B,UAAU,gBACb,yBAAKA,UAAU,oDACf,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,2BACb,kBAAC,EAAD,CAAgB+B,OAAQA,MAG5B,yBAAK/B,UAAU,wDCXfsC,EAAgB,CACpBN,IAAK,GACLC,KAAM,GACNC,IAAK,GACLC,OAAQ,GACRC,KAAM,GACNG,SAAU,WAQR,MAPqB,CACnBC,KAAKR,IACLQ,KAAKP,KACLO,KAAKN,IACLM,KAAKL,OACLK,KAAKJ,MAEaK,QAAO,SAACC,GAAD,MAAmB,KAATA,KAAaC,KAAK,QAcrDC,EAAc,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,SAAaC,EAAwB,8BAC1BC,mBAAiBT,GADS,mBACnDU,EADmD,KACzCC,EADyC,OAE1BF,mBAAwB7C,EAAcsB,OAFZ,mBAEnDD,EAFmD,KAEzC2B,EAFyC,KAoB1D,OACE,6BAASlD,UAAU,4DACjB,kBAAC,EAAD,CAAa+B,OAAQiB,IACrB,6BACE,0BAAMG,SAXQ,SAAC9B,GACnBA,EAAM+B,iBACNP,EAASG,GACTC,EAAYX,GACZY,EAAYhD,EAAcsB,SAQpB,kBAAC,EAAD,CACEpB,OAAQ0C,EAAWvB,GACnBlB,cAAekB,EACfjB,iBAxBa,SAACK,EAAe0C,GACrCJ,GACE,SAAClB,GAAD,sBACKA,EADL,eAEGsB,EAAe1C,QAqBZJ,iBAAkB+C,OAAOC,OAAOP,KAElC,yBAAKhD,UAAU,qDACZuB,IAAarB,EAAcsB,OAC1B,4BACExB,UAAU,oBACVkB,KAAK,SACLsC,QAAS,kBACPN,GAAY,SAACO,GACX,OAAQA,GACN,KAAKvD,EAAcwD,MACjB,OAAOxD,EAAcyD,QACvB,KAAKzD,EAAcyD,QACjB,OAAOzD,EAAc0D,KACvB,KAAK1D,EAAc0D,KACjB,OAAO1D,EAAc2D,KACvB,KAAK3D,EAAc2D,KAEnB,QACE,OAAO3D,EAAcsB,YAf/B,qBAuBDD,IAAarB,EAAcwD,MAC1B,2BACE1D,UAAU,2BACVkB,KAAK,SACLD,MAAM,WAGR,4BACEjB,UAAU,oBACVkB,KAAK,SACLsC,QAAS,kBACPN,GAAY,SAACO,GACX,OAAQA,GACN,KAAKvD,EAAcsB,MACjB,OAAOtB,EAAc2D,KACvB,KAAK3D,EAAc2D,KACjB,OAAO3D,EAAc0D,KACvB,KAAK1D,EAAc0D,KACjB,OAAO1D,EAAcyD,QACvB,KAAKzD,EAAcyD,QAEnB,QACE,OAAOzD,EAAcwD,YAf/B,sBAuCdd,EAAY3C,aATgB,CAC1BuB,MAAO,GACPqC,KAAM,GACND,KAAM,GACND,QAAS,GACTD,MAAO,GACPb,SAAU,cAKGD,IC1IAA,ED0IAA,EEzITkB,G,MAAOC,SAASC,eAAe,WAC/BC,EAAUF,SAASG,cAAc,WAMjCC,EAAS,SAAC,GAAyB,IAAvBpE,EAAsB,EAAtBA,SAKhB,OAJAqE,qBAAU,WACRN,EAAMO,YAAYJ,KACjB,IAEIK,uBAAavE,EAAUkE,IAG1BhE,EAAsB,CAC1BF,SAAU,sCAGZoE,EAAOlE,aAAeA,EAEPkE,ICtBAA,EDsBAA,EEfTI,EAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQzE,EAAX,EAAWA,SAAX,OACZ,kBAAC,EAAD,KAASyE,GAAU,yBAAKxE,UAAU,SAASD,KAGvCE,EAAsB,CAC1BuE,QAAQ,EACRzE,SAAU,sCAGZwE,EAAMtE,aAAeA,EAENsE,IClBAA,EDkBAA,EEVTE,G,MAAe,SAAC,GAAqC,IAAnC1C,EAAkC,EAAlCA,OAAQ2C,EAA0B,EAA1BA,aACxBC,EAAMC,iBAA4B,MADgB,EAExB7B,oBAAkB,GAFM,mBAEjD8B,EAFiD,KAEvCC,EAFuC,KAexD,OACE,yBAAK9E,UAAU,SACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAgB+B,OAAQA,IACxB,4BAAQ/B,UAAU,yBAAyBwD,QAfzB,SAACuB,GACvBA,EAAE3B,iBACEuB,GAAOA,EAAIK,UACbF,GAAY,GACZH,EAAIK,QAAQC,QAAS,EACrBN,EAAIK,QAAQE,SACZnB,SAASoB,YAAY,QACrBR,EAAIK,QAAQC,QAAS,KAShBJ,EAAW,UAAY,qBAE1B,4BAAQ7E,UAAU,sBAAsBwD,QAASkB,GAAjD,MAIF,8BAAUU,UAAQ,EAACT,IAAKA,EAAKM,QAAM,EAAChE,MAAOc,EAAOQ,gBASxDkC,EAAaxE,aALe,CAC1B8B,OAAQ,CAAEhB,KAAM,GAAIkB,KAAM,GAAID,IAAK,GAAIE,IAAK,GAAIC,OAAQ,GAAIC,KAAM,IAClEsC,aAAc,cAKDD,ICrCVY,ECRUZ,EF6CAA,EGkHArE,EA/JS,CACtB,CACEe,GAAI,EACJI,SAAU,MACVR,KAAM,QACNF,UAAW,gBAEb,CACEM,GAAI,EACJI,SAAU,MACVR,KAAM,UACNF,UAAW,gBAEb,CACEM,GAAI,EACJI,SAAU,MACVR,KAAM,UACNF,UAAW,gBAEb,CACEM,GAAI,EACJI,SAAU,MACVR,KAAM,eACNF,UAAW,gBAEb,CACEM,GAAI,EACJI,SAAU,MACVR,KAAM,QACNF,UAAW,gBAEb,CACEM,GAAI,EACJI,SAAU,MACVR,KAAM,QACNF,UAAW,gBAEb,CACEM,GAAI,EACJI,SAAU,MACVR,KAAM,SACNF,UAAW,gBAEb,CACEM,GAAI,EACJI,SAAU,MACVR,KAAM,OACNF,UAAW,gBAEb,CACEM,GAAI,EACJI,SAAU,MACVR,KAAM,UACNF,UAAW,gBAEb,CACEM,GAAI,GACJI,SAAU,MACVR,KAAM,gBACNF,UAAW,gBAEb,CACEM,GAAI,GACJI,SAAU,MACVR,KAAM,WACNF,UAAW,gBAEb,CACEM,GAAI,GACJI,SAAU,MACVR,KAAM,oBACNF,UAAW,gBAEb,CACEM,GAAI,GACJI,SAAU,SACVR,KAAM,QACNF,UAAW,gBAEb,CACEM,GAAI,GACJI,SAAU,SACVR,KAAM,MACNF,UAAW,gBAEb,CACEM,GAAI,GACJI,SAAU,OACVR,KAAM,oBACNF,UAAW,gBAEb,CACEM,GAAI,GACJI,SAAU,OACVR,KAAM,eACNF,UAAW,gBAEb,CACEM,GAAI,GACJI,SAAU,OACVR,KAAM,SACNF,UAAW,gBAEb,CACEM,GAAI,GACJI,SAAU,OACVR,KAAM,cACNF,UAAW,gBAEb,CACEM,GAAI,GACJI,SAAU,OACVR,KAAM,YACNF,UAAW,gBAEb,CACEM,GAAI,GACJI,SAAU,OACVR,KAAM,QACNF,UAAW,gBAEb,CACEM,GAAI,GACJI,SAAU,OACVR,KAAM,OACNF,UAAW,gBAEb,CACEM,GAAI,GACJI,SAAU,OACVR,KAAM,SACNF,UAAW,gBAEb,CACEM,GAAI,GACJI,SAAU,OACVR,KAAM,UACNF,UAAW,gBAEb,CACEM,GAAI,GACJI,SAAU,OACVR,KAAM,QACNF,UAAW,gBAEb,CACEM,GAAI,GACJI,SAAU,OACVR,KAAM,QACNF,UAAW,gBAEb,CACEM,GAAI,GACJI,SAAU,OACVR,KAAM,QACNF,UAAW,kB,SFnJVwE,K,oBAAAA,E,sBAAAA,E,wBAAAA,E,wBAAAA,E,2BAAAA,M,KAkBL,IAAMC,EAA4B,CAChCC,WAAW,EACXC,SAAS,EACTC,aAAa,EACbC,QAAS,IAULC,EAA2C,SAC/CC,EACAC,GAEA,OAAQA,EAAO3E,MACb,KAAKmE,EAAWS,WACd,OAAO,eACFF,EADL,CAEEH,aAAa,EACbM,eAAgBF,EAAOG,OAE3B,KAAKX,EAAWY,YACd,OAAO,eACFL,EADL,CAEEH,aAAa,IAEjB,QACE,OAAO,eAAKG,KAqCHM,EAjCH,WAAO,IAAD,EACUC,qBACxBR,EACAL,GAHc,mBACTM,EADS,KACFQ,EADE,KAWhB,OACE,yBAAKpG,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEwB,MAAOpB,EAAOqC,QAAO,SAAC9B,GAAD,MAA8B,SAAnBA,EAAMY,YACtCsC,KAAMzD,EAAOqC,QAAO,SAAC9B,GAAD,MAA8B,QAAnBA,EAAMY,YACrCqC,KAAMxD,EAAOqC,QAAO,SAAC9B,GAAD,MAA8B,QAAnBA,EAAMY,YACrCoC,QAASvD,EAAOqC,QAAO,SAAC9B,GAAD,MAA8B,WAAnBA,EAAMY,YACxCmC,MAAOtD,EAAOqC,QAAO,SAAC9B,GAAD,MAA8B,SAAnBA,EAAMY,YACtCsB,SAdU,SAACd,GAAD,OAChBqE,EAAS,CAAElF,KAAMmE,EAAWS,WAAYE,KAAMjE,OAe1C,kBAAC,EAAD,CAAOyC,OAAQoB,EAAMH,aACnB,kBAAC,EAAD,CACEf,aAfW,kBAAM0B,EAAS,CAAElF,KAAMmE,EAAWY,eAgB7ClE,OAAQ6D,EAAMG,qBG5ENM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7C,SAASC,eAAe,SDiIpB,kBAAmB6C,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fbe7524d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./PageWrapper.scss\";\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst PageWrapper = ({ children }: Props) => (\n  <div className=\"wrapper_container\">{children}</div>\n);\n\nconst defaultProps: Props = {\n  children: <></>,\n};\n\nPageWrapper.defaultProps = defaultProps;\n\nexport default PageWrapper;\n","export enum EmojiCategory {\n  faces = \"faces\",\n  hats = \"hats\",\n  tops = \"tops\",\n  bottoms = \"bottoms\",\n  shoes = \"shoes\",\n}\n","import React from \"react\";\nimport { Emoji } from \"../../interfaces/Emoji.interface\";\nimport { EmojiCategory } from \"../../enums/EmojiCategory.enum\";\nimport \"./EmojiPicker.scss\";\n\ntype Props = {\n  emojis: Emoji[];\n  emojiCategory: EmojiCategory;\n  onEmojiSelection: (emojiChar: string, categoryName: string) => void;\n  avatarSelections: string[];\n};\n\nconst EmojiPicker = ({\n  emojis,\n  emojiCategory,\n  onEmojiSelection,\n  avatarSelections,\n}: Props) => (\n  <fieldset className=\"emoji-fieldset\">\n    <legend style={{ margin: \"auto\" }}>Pick from these {emojiCategory}:</legend>\n    {emojis.map((emoji: Emoji) => (\n      <span\n        className={`emoji-fieldset__optn ${\n          avatarSelections.includes(emoji.emojiChar)\n            ? \"emoji-fieldset__optn--selected\"\n            : \"emoji-fieldset__optn--not-selected\"\n        }`}\n      >\n        <label htmlFor={emoji.name}>{emoji.emojiChar}</label>\n        <input\n          name={EmojiCategory[emojiCategory]}\n          checked={avatarSelections.includes(emoji.emojiChar)}\n          value={emoji.emojiChar}\n          type=\"radio\"\n          className=\"element--hide\"\n          id={emoji.name}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n            onEmojiSelection(event.target.value, emoji.category)\n          }\n        />\n      </span>\n    ))}\n  </fieldset>\n);\n\nconst defaultProps: Props = {\n  emojis: [],\n  emojiCategory: EmojiCategory.faces,\n  onEmojiSelection: () => undefined,\n  avatarSelections: [\"\"],\n};\n\nEmojiPicker.defaultProps = defaultProps;\n\nexport default EmojiPicker;\n","import EmojiPicker from \"./EmojiPicker\";\n\nexport default EmojiPicker;\n","import React from \"react\";\n\ntype Props = {\n  ariaLabel: string;\n  emoji: string;\n  classNames?: string;\n};\n\nconst EmojiChar = ({ ariaLabel, emoji, classNames }: Props) => (\n  <span className={classNames} role=\"img\" aria-label={ariaLabel}>\n    {emoji}\n  </span>\n);\n\nconst defaultProps: Props = {\n  ariaLabel: \"\",\n  emoji: \"\",\n};\n\nEmojiChar.defaultProps = defaultProps;\n\nexport default EmojiChar;\n","import EmojiChar from \"./EmojiChar\";\n\nexport default EmojiChar;\n","import React from \"react\";\nimport { Avatar } from \"../../interfaces/Avatar.interface\";\nimport EmojiChar from \"../EmojiChar\";\nimport \"./AvatarCreation.scss\";\n\ntype Props = {\n  avatar: Avatar;\n  classNames?: string;\n};\n\nconst AvatarCreation = ({ avatar, classNames }: Props) => (\n  <ul className={`avatar ${classNames ? classNames : \"\"}`}>\n    {avatar.hat && (\n      <li>\n        <EmojiChar ariaLabel=\"hat\" emoji={avatar.hat} />\n      </li>\n    )}\n    {avatar.face && (\n      <li>\n        <EmojiChar ariaLabel=\"face\" emoji={avatar.face} />\n      </li>\n    )}\n    {avatar.top && (\n      <li>\n        <EmojiChar ariaLabel=\"top\" emoji={avatar.top} />\n      </li>\n    )}\n    {avatar.bottom && (\n      <li>\n        <EmojiChar ariaLabel=\"bottom\" emoji={avatar.bottom} />\n      </li>\n    )}\n    {avatar.shoe && (\n      <li>\n        <EmojiChar ariaLabel=\"shoe\" emoji={avatar.shoe} />\n      </li>\n    )}\n  </ul>\n);\n\nconst defaultProps: Props = {\n  avatar: {},\n};\n\nAvatarCreation.defaultProps = defaultProps;\n\nexport default AvatarCreation;\n","import AvatarCreation from \"./AvatarCreation\";\n\nexport default AvatarCreation;\n","import React from \"react\";\nimport { Avatar } from \"../../interfaces/Avatar.interface\";\nimport AvatarCreation from \"../AvatarCreation\";\nimport \"./FittingRoom.scss\";\n\ntype Props = {\n  avatar: Avatar;\n};\n\nconst FittingRoom = ({ avatar }: Props) => {\n  return (\n    <div className=\"fitting-room\">\n      <div className=\"fitting-room__drapes fitting-room__drapes--left\"></div>\n      <div className=\"fitting-room__pole\"></div>\n      <div className=\"fitting-room__mirror\">\n        <div className=\"fitting-room__character\">\n          <AvatarCreation avatar={avatar} />\n        </div>\n      </div>\n      <div className=\"fitting-room__drapes fitting-room__drapes--right\"></div>\n    </div>\n  );\n};\n\nexport default FittingRoom;\n","import React, { useState } from \"react\";\nimport { Emoji } from \"../../interfaces/Emoji.interface\";\nimport { Avatar } from \"../../interfaces/Avatar.interface\";\nimport { EmojiCategory } from \"../../enums/EmojiCategory.enum\";\nimport EmojiPicker from \"../EmojiPicker\";\nimport \"./AvatarMaker.scss\";\nimport FittingRoom from \"../FittingRoom/FittingRoom\";\n\nconst initialAvatar = {\n  hat: \"\",\n  face: \"\",\n  top: \"\",\n  bottom: \"\",\n  shoe: \"\",\n  toString: function () {\n    const apparelItems = [\n      this.hat,\n      this.face,\n      this.top,\n      this.bottom,\n      this.shoe,\n    ];\n    return apparelItems.filter((item) => item !== \"\").join(\"\\n\");\n  },\n};\n\ntype Props = {\n  faces: Emoji[];\n  hats: Emoji[];\n  tops: Emoji[];\n  bottoms: Emoji[];\n  shoes: Emoji[];\n  onFinish: (avatar: Avatar) => void;\n  [key: string]: Emoji[] | Function;\n};\n\nconst AvatarMaker = ({ onFinish, ...categories }: Props) => {\n  const [creation, setCreation] = useState<Avatar>(initialAvatar);\n  const [category, setCategory] = useState<EmojiCategory>(EmojiCategory.faces);\n\n  const updateCreation = (emoji: string, categoryName: string) => {\n    setCreation(\n      (avatar: Avatar): Avatar => ({\n        ...avatar,\n        [categoryName]: emoji,\n      })\n    );\n  };\n\n  const createEmoji = (event: React.FormEvent<HTMLFormElement>): void => {\n    event.preventDefault();\n    onFinish(creation);\n    setCreation(initialAvatar);\n    setCategory(EmojiCategory.faces);\n  };\n\n  return (\n    <section className=\"create-emoji cont cont--direction-col cont--align-center\">\n      <FittingRoom avatar={creation} />\n      <div>\n        <form onSubmit={createEmoji}>\n          <EmojiPicker\n            emojis={categories[category]}\n            emojiCategory={category}\n            onEmojiSelection={updateCreation}\n            avatarSelections={Object.values(creation)}\n          />\n          <div className=\"cont cont--justify-center create-emoji__btn-group\">\n            {category !== EmojiCategory.faces && (\n              <button\n                className=\"create-emoji__btn\"\n                type=\"button\"\n                onClick={() =>\n                  setCategory((prevCategory: EmojiCategory) => {\n                    switch (prevCategory) {\n                      case EmojiCategory.shoes:\n                        return EmojiCategory.bottoms;\n                      case EmojiCategory.bottoms:\n                        return EmojiCategory.tops;\n                      case EmojiCategory.tops:\n                        return EmojiCategory.hats;\n                      case EmojiCategory.hats:\n                        return EmojiCategory.faces;\n                      default:\n                        return EmojiCategory.faces;\n                    }\n                  })\n                }\n              >\n                Previous Category\n              </button>\n            )}\n            {category === EmojiCategory.shoes ? (\n              <input\n                className=\"create-emoji__btn--final\"\n                type=\"submit\"\n                value=\"Finish\"\n              />\n            ) : (\n              <button\n                className=\"create-emoji__btn\"\n                type=\"button\"\n                onClick={() =>\n                  setCategory((prevCategory: EmojiCategory) => {\n                    switch (prevCategory) {\n                      case EmojiCategory.faces:\n                        return EmojiCategory.hats;\n                      case EmojiCategory.hats:\n                        return EmojiCategory.tops;\n                      case EmojiCategory.tops:\n                        return EmojiCategory.bottoms;\n                      case EmojiCategory.bottoms:\n                        return EmojiCategory.shoes;\n                      default:\n                        return EmojiCategory.shoes;\n                    }\n                  })\n                }\n              >\n                Next Category\n              </button>\n            )}\n          </div>\n        </form>\n      </div>\n    </section>\n  );\n};\n\nconst defaultProps: Props = {\n  faces: [],\n  hats: [],\n  tops: [],\n  bottoms: [],\n  shoes: [],\n  onFinish: () => undefined,\n};\n\nAvatarMaker.defaultProps = defaultProps;\n\nexport default AvatarMaker;\n","import AvatarMaker from \"./AvatarMaker\";\n\nexport default AvatarMaker;\n","import React, { useEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nconst root = document.getElementById(\"portal\");\nconst section = document.createElement(\"section\");\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst Portal = ({ children }: Props) => {\n  useEffect(() => {\n    root!.appendChild(section);\n  }, []);\n\n  return createPortal(children, section);\n};\n\nconst defaultProps: Props = {\n  children: <></>,\n};\n\nPortal.defaultProps = defaultProps;\n\nexport default Portal;\n","import Portal from \"./Portal\";\n\nexport default Portal;\n","import React from \"react\";\nimport \"./Modal.scss\";\nimport Portal from \"../Portal\";\n\ntype Props = {\n  isOpen: boolean;\n  children: React.ReactNode;\n};\n\nconst Modal = ({ isOpen, children }: Props) => (\n  <Portal>{isOpen && <div className=\"modal\">{children}</div>}</Portal>\n);\n\nconst defaultProps: Props = {\n  isOpen: false,\n  children: <></>,\n};\n\nModal.defaultProps = defaultProps;\n\nexport default Modal;\n","import Modal from \"./Modal\";\n\nexport default Modal;\n","import React, { useRef, useState } from \"react\";\nimport \"./PictureFrame.scss\";\nimport { Avatar } from \"../../interfaces/Avatar.interface\";\nimport AvatarCreation from \"../AvatarCreation\";\n\ntype Props = {\n  avatar: Avatar;\n  onFrameClose: () => void;\n};\n\nconst PictureFrame = ({ avatar, onFrameClose }: Props) => {\n  const ref = useRef<HTMLTextAreaElement>(null);\n  const [isCopied, setIsCopied] = useState<boolean>(false);\n\n  const copyToClipboard = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    if (ref && ref.current) {\n      setIsCopied(true);\n      ref.current.hidden = false;\n      ref.current.select();\n      document.execCommand(\"copy\");\n      ref.current.hidden = true;\n    }\n  };\n\n  return (\n    <div className=\"frame\">\n      <div className=\"frame__photo\">\n        <AvatarCreation avatar={avatar} />\n        <button className=\"frame__photo__copy-btn\" onClick={copyToClipboard}>\n          {isCopied ? \"Copied!\" : \"Copy to clipboard\"}\n        </button>\n        <button className=\"frame__photo__close\" onClick={onFrameClose}>\n          X\n        </button>\n      </div>\n      <textarea readOnly ref={ref} hidden value={avatar.toString()} />\n    </div>\n  );\n};\nconst defualtProps: Props = {\n  avatar: { name: \"\", face: \"\", hat: \"\", top: \"\", bottom: \"\", shoe: \"\" },\n  onFrameClose: () => undefined,\n};\n\nPictureFrame.defaultProps = defualtProps;\n\nexport default PictureFrame;\n","import React, { useReducer } from \"react\";\nimport \"./App.scss\";\nimport { Emoji } from \"./interfaces/Emoji.interface\";\nimport { Avatar } from \"./interfaces/Avatar.interface\";\nimport PageWrapper from \"./layouts/PageWrapper/PageWrapper\";\nimport AvatarMaker from \"./components/AvatarMaker\";\nimport Modal from \"./components/Modal\";\nimport PictureFrame from \"./components/PictureFrame\";\nimport emojis from \"./data/emojis\";\n\nenum ActionType {\n  SET_DATA = \"SET_DATA\",\n  SET_ERROR = \"SET_ERROR\",\n  ADD_AVATAR = \"ADD_AVATAR\",\n  OPEN_MODAL = \"OPEN_MODAL\",\n  CLOSE_MODAL = \"CLOSE_MODAL\",\n}\n\ntype AppState = {\n  isLoading: boolean;\n  isError: boolean;\n  isModalOpen: boolean;\n  emojis?: Emoji[];\n  avatars: Avatar[];\n  selectedAvatar?: Avatar;\n  errMsg?: string;\n};\n\nconst initialAppState: AppState = {\n  isLoading: true,\n  isError: false,\n  isModalOpen: false,\n  avatars: [],\n};\n\ntype Action =\n  | { type: ActionType.SET_DATA; data: Emoji[] }\n  | { type: ActionType.SET_ERROR; errMsg: string }\n  | { type: ActionType.ADD_AVATAR; data: Avatar }\n  | { type: ActionType.OPEN_MODAL; data: Avatar }\n  | { type: ActionType.CLOSE_MODAL };\n\nconst reducer: React.Reducer<AppState, Action> = (\n  state: AppState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionType.OPEN_MODAL:\n      return {\n        ...state,\n        isModalOpen: true,\n        selectedAvatar: action.data,\n      };\n    case ActionType.CLOSE_MODAL:\n      return {\n        ...state,\n        isModalOpen: false,\n      };\n    default:\n      return { ...state };\n  }\n};\n\nconst App = () => {\n  const [state, dispatch] = useReducer<React.Reducer<AppState, Action>>(\n    reducer,\n    initialAppState\n  );\n\n  const openModal = (avatar: Avatar) =>\n    dispatch({ type: ActionType.OPEN_MODAL, data: avatar });\n\n  const onModalClose = () => dispatch({ type: ActionType.CLOSE_MODAL });\n\n  return (\n    <div className=\"App\">\n      <PageWrapper>\n        <AvatarMaker\n          faces={emojis.filter((emoji) => emoji.category === \"face\")}\n          hats={emojis.filter((emoji) => emoji.category === \"hat\")}\n          tops={emojis.filter((emoji) => emoji.category === \"top\")}\n          bottoms={emojis.filter((emoji) => emoji.category === \"bottom\")}\n          shoes={emojis.filter((emoji) => emoji.category === \"shoe\")}\n          onFinish={openModal}\n        />\n        <Modal isOpen={state.isModalOpen}>\n          <PictureFrame\n            onFrameClose={onModalClose}\n            avatar={state.selectedAvatar}\n          />\n        </Modal>\n      </PageWrapper>\n    </div>\n  );\n};\n\nexport default App;\n","import PictureFrame from \"./PictureFrame\";\n\nexport default PictureFrame;\n","import { Emoji } from \"../interfaces/Emoji.interface\";\n\nconst emojis: Emoji[] = [\n  {\n    id: 1,\n    category: \"hat\",\n    name: \"Crown\",\n    emojiChar: \"👑\",\n  },\n  {\n    id: 2,\n    category: \"hat\",\n    name: \"Sun Hat\",\n    emojiChar: \"👒\",\n  },\n  {\n    id: 3,\n    category: \"hat\",\n    name: \"Top Hat\",\n    emojiChar: \"🎩\",\n  },\n  {\n    id: 4,\n    category: \"hat\",\n    name: \"Baseball Cap\",\n    emojiChar: \"🧢\",\n  },\n  {\n    id: 5,\n    category: \"hat\",\n    name: \"Brain\",\n    emojiChar: \"🧠\",\n  },\n  {\n    id: 6,\n    category: \"top\",\n    name: \"Dress\",\n    emojiChar: \"👗\",\n  },\n  {\n    id: 7,\n    category: \"top\",\n    name: \"Kimono\",\n    emojiChar: \"👘\",\n  },\n  {\n    id: 8,\n    category: \"top\",\n    name: \"Coat\",\n    emojiChar: \"🧥\",\n  },\n  {\n    id: 9,\n    category: \"top\",\n    name: \"T-Shirt\",\n    emojiChar: \"👕\",\n  },\n  {\n    id: 10,\n    category: \"top\",\n    name: \"Shirt and Tie\",\n    emojiChar: \"👔\",\n  },\n  {\n    id: 11,\n    category: \"top\",\n    name: \"Lab Coat\",\n    emojiChar: \"🥼\",\n  },\n  {\n    id: 12,\n    category: \"top\",\n    name: \"Alternate T-Shirt\",\n    emojiChar: \"👚\",\n  },\n  {\n    id: 13,\n    category: \"bottom\",\n    name: \"Jeans\",\n    emojiChar: \"👖\",\n  },\n  {\n    id: 14,\n    category: \"bottom\",\n    name: \"Leg\",\n    emojiChar: \"🦵\",\n  },\n  {\n    id: 15,\n    category: \"shoe\",\n    name: \"Lifestyle Sneaker\",\n    emojiChar: \"👞\",\n  },\n  {\n    id: 16,\n    category: \"shoe\",\n    name: \"Running Shoe\",\n    emojiChar: \"👟\",\n  },\n  {\n    id: 17,\n    category: \"shoe\",\n    name: \"Sandal\",\n    emojiChar: \"👡\",\n  },\n  {\n    id: 18,\n    category: \"shoe\",\n    name: \"Hiking Boot\",\n    emojiChar: \"🥾\",\n  },\n  {\n    id: 19,\n    category: \"shoe\",\n    name: \"High Heel\",\n    emojiChar: \"👠\",\n  },\n  {\n    id: 20,\n    category: \"face\",\n    name: \"Smile\",\n    emojiChar: \"😃\",\n  },\n  {\n    id: 21,\n    category: \"face\",\n    name: \"Male\",\n    emojiChar: \"🧑\",\n  },\n  {\n    id: 22,\n    category: \"face\",\n    name: \"Female\",\n    emojiChar: \"👩\",\n  },\n  {\n    id: 23,\n    category: \"face\",\n    name: \"Glasses\",\n    emojiChar: \"🤓\",\n  },\n  {\n    id: 24,\n    category: \"face\",\n    name: \"Clown\",\n    emojiChar: \"🤡\",\n  },\n  {\n    id: 25,\n    category: \"face\",\n    name: \"Alien\",\n    emojiChar: \"👽\",\n  },\n  {\n    id: 26,\n    category: \"face\",\n    name: \"Robot\",\n    emojiChar: \"🤖\",\n  },\n];\n\nexport default emojis;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}